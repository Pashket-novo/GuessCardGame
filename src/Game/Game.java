/**
 * The Game class manage the playing of a game.
 * Entiry game simulation is implemented here.
 * It interacts with other class's objects.
 *
 * @author Pavel Zemnukhov
 * @version 1.0 (08-May-2020)
 */

package Game;

import java.util.*;

public class Game
{
    private Player cardGamePlayer; //declaring object of the Player class

    /**
     * Constructor for objects of class Game
     */
    public Game()
    {
        cardGamePlayer = new Player(); // initialise field
    }

    /**
     * Method to check string length and to access first character of the String
     * By default it return ' ' character, if String length less than 1
     *
     * @param   userInput   a string, result of user input
     * @return              single character in lower case
     */
    public char checkCharLength(String userInput)
    {
        char inputOption = ' ';
        if (checkStringLength(userInput))
            inputOption = userInput.toLowerCase().charAt(0);
        return inputOption;
    }

    public static void main(String[] args)
    {
        Game game = new Game();
        game.gameEmulation();
    }

    /**
     * Method to check string length and to access first character of the String
     * By default it return ' ' character, if String length less than 1
     *
     * @param   userInput   a string, result of user input
     * @return              single character in upper case
     */
    public char checkCharLengthUp(String userInput)
    {
        char inputOption = ' ';
        if (checkStringLength(userInput))
            inputOption = userInput.toUpperCase().charAt(0);
        return inputOption;
    }

    /**
     * Method to accept input from the user for player's name and to check, if the name comply with
     * the game requriments(not blank and alphabetical) and updating their name
     */
    public void checkName()
    {
        boolean isContinue = true;
        while(isContinue)
        {
            String userInput = getInput();
            if (checkStringLength(userInput) && isStringAlphabetic(userInput))
            {
                System.out.println("Welcome to the game " + userInput + "!");
                updatePlayerName(userInput);
                isContinue = false;
            }
            else
            {
                System.out.println("Name cannot be blank!");
                System.out.println("And should contain only alphabetic characters.");
                System.out.println("Please enter correct name: ");
            }
        }
    }

    /**
     * Method to check the score of the game is greater than zero
     */
    public boolean checkScore()
    {
        if (cardGamePlayer.getScore() > 0)
            return true;
        else
            return false;
    }

    /**
     * Method to check if the input string is greater than zero
     *
     * @param   aString     a single string
     * @return              boolean statement
     */
    public boolean checkStringLength(String aString)
    {
        if (aString.length() > 0)
            return true;
        else
            return false;
    }

    /**
     * Method compares number of the card guessed by player and generated randomly
     *
     * @param   playerGuess     an integer entered by player
     * @param   randomNumber    an integer generated by computer
     * @return              boolean statement
     */
    public boolean compareNumber(int playerGuess, int randomNumber)
    {
        if (playerGuess == randomNumber)
            return true;
        else
            return false;
    }

    /**
     * Method compares suit of the card guessed by player and generated randomly
     *
     * @param   playerGuess     an integer entered by player
     * @param   randomNumber    an integer generated by computer
     * @return              boolean statement
     */
    public boolean compareSuit(int playerGuess, int randomNumber)
    {
        if (playerGuess == randomNumber)
            return true;
        else
            return false;
    }

    /**
     * Method to show player menu, asking for new game
     */
    public void continueMenu()
    {
        System.out.println("Game is finish! Do you want to play another game?");
        System.out.println("Y. YES #Y");
        System.out.println("N. NO #N");
        System.out.println("Please enter your choice:");
    }

    /**
     * Method to continue game or stop it, after one game already played
     *
     * @return      boolean statement, responsible for the start of new game or end game
     */
    public boolean continueProcess()
    {
        boolean isGame = true;
        boolean isContinue = true;
        continueMenu();
        do
        {
            String userInput = getInput();
            switch (checkCharLengthUp(userInput))
            {
                case 'Y':
                    System.out.println("Option #Y YES was selected");
                    isContinue = false; break;
                case 'N':
                    System.out.println("Option #N NO was selected");
                    System.out.println("Number of games played: " +
                            cardGamePlayer.getNumberOfGamesPlayed());
                    System.out.println("Number of games won: "
                            + cardGamePlayer.getNumberOfGamesWon());
                    System.out.println("Highest Score: " +
                            cardGamePlayer.getHighestScore() + " points");
                    isGame = false;
                    isContinue = false; break;
                default:
                    System.out.println("Invalid option, please enter Y/N!"); break;
            }
        } while (isContinue);
        return isGame;
    }

    /**
     * Method to show starting menu
     */
    public void displayMenu()
    {
        System.out.println("Welcome to the Guess a Card Game!");
        System.out.println("#################################");
    }

    /**
     * Method to ask for Player's name
     */
    public void enterName()
    {
        System.out.println("Please enter your name:");
    }

    /**
     * Method to emulate entire game, calling other methods in order to fullfill game requirements
     * Game end, when player out of attempts, score below zero or player guessed nubmer correctly
     * Score for the game is allowed to go below zero, it will be shown as final result, if player lose
     */
    public void gameEmulation()
    {
        displayMenu();
        enterName();
        checkName();
        boolean isGame = true;
        while(isGame)  //while loop to play various of games untill isGame is set to false
        {
            Card card = new Card(randomNumber(4), randomNumber(13));
            cardGamePlayer.setScore(40);
            System.out.println("Starting score: " + cardGamePlayer.getScore() + " ponts");
            guessSuitAttempt(card.getSuit());
            guessNumberAttempt(card.getNumber());
            System.out.println("Your score for the game: " + cardGamePlayer.getScore() + " points");
            updHighestScore(cardGamePlayer.getScore());
            updGamesPlayed();
            isGame = continueProcess();   //return isGame true or false
        }
    }

    /**
     * Method to ask user for input string, using Scanner class
     *
     * @return      string input
     */
    public String getInput()
    {
        Scanner console = new Scanner(System.in);
        String userInput = console.nextLine();
        return userInput;
    }

    /**
     * Method to ask user for input and converting this input to integer
     *
     * https://stackoverflow.com/questions/19925047/how-to-check-the-input-is-an-integer-or-not-in-java
     * Source where way of convertation from string to integer was found
     *
     * @return      integer input
     */
    public int getIntInput()
    {
        int intInput = 0;
        boolean isContinue = true;
        while(isContinue)
        {
            String userInput = getInput();
            if (checkStringLength(userInput) && isStringNumeric(userInput))
            {
                intInput = Integer.parseInt(userInput); // convert string to integer
                isContinue = false;
            }
            else
            {
                System.out.println("Wrong input!");
                System.out.println("Please enter integer choice:");
            }
        }
        return intInput;
    }

    /**
     * Method to guess a number of the card
     *
     * @return      int nubmer
     */
    public int guessNumber()
    {
        boolean isContinue = true;
        int number = 0;
        while(isContinue)
        {
            int userInput = getIntInput();
            switch (userInput)
            {
                case 1:
                    System.out.println("Ace #1 was selected");
                    number = 1;
                    isContinue = false; break;
                case 2:
                    System.out.println("Number 2 #2 was selected");
                    number = 2;
                    isContinue = false; break;
                case 3:
                    System.out.println("Number 3 #3 was selected");
                    number = 3;
                    isContinue = false; break;
                case 4:
                    System.out.println("Number 4 #4 was selected");
                    number = 4;
                    isContinue = false; break;
                case 5:
                    System.out.println("Number 5 #5 was selected");
                    number = 5;
                    isContinue = false; break;
                case 6:
                    System.out.println("Number 6 #6 was selected");
                    number = 6;
                    isContinue = false; break;
                case 7:
                    System.out.println("Number 7 #7 was selected");
                    number = 7;
                    isContinue = false; break;
                case 8:
                    System.out.println("Number 8 #8 was selected");
                    number = 8;
                    isContinue = false; break;
                case 9:
                    System.out.println("Number 9 #9 was selected");
                    number = 9;
                    isContinue = false; break;
                case 10:
                    System.out.println("Number 10 #10 was selected");
                    number = 10;
                    isContinue = false; break;
                case 11:
                    System.out.println("Jack #11 was selected");
                    number = 11;
                    isContinue = false; break;
                case 12:
                    System.out.println("Queen #12 was selected");
                    number = 12;
                    isContinue = false; break;
                case 13:
                    System.out.println("King #13 was selected");
                    number = 13;
                    isContinue = false; break;
                default:
                    System.out.println("Invalid option!"); break;
            }
        }
        return number;
    }

    /**
     * Method to process of guessing the card's number by the Player, via 4 attempts
     *
     * @param   randomGuess     an integer generated by computer
     */
    public void guessNumberAttempt(int randomGuess)
    {
        boolean isContinue = true;
        int attempt = 1;
        int number;
        while (isContinue && attempt < 5 )
        {
            if (attempt == 1)
            {
                guessNumberMenu();
                number = guessNumber();
                updateGuess(number);        //update last guess of the Player
                if (compareNumber(number, randomGuess))
                {
                    System.out.println("You are correct!");
                    updGamesWon();          //update number of games won
                    System.out.println("Congratulations, you won the game!");
                    isContinue = false;
                }
                else
                {
                    cardGamePlayer.deductPoint(2);      //deduct poits for wrong guess
                    System.out.println("Incorrect, please try again!") ;
                    System.out.println("Please enter your choice:") ;
                }
            }
            if (attempt ==2)
            {
                number = guessNumber();
                updateGuess(number);
                if (compareNumber(number, randomGuess))
                {
                    System.out.println("You are correct!");
                    updGamesWon();
                    System.out.println("Congratulations, you won the game!");
                    isContinue = false;
                }
                else
                {
                    cardGamePlayer.deductPoint(6);
                    System.out.println("Incorrect, please try again!") ;
                    System.out.println("Please enter your choice:") ;
                }
            }
            if (attempt ==3)
            {
                number = guessNumber();
                updateGuess(number);
                if (compareNumber(number, randomGuess))
                {
                    System.out.println("You are correct!");
                    updGamesWon();
                    System.out.println("Congratulations, you won the game!");
                    isContinue = false;
                }
                else
                {
                    cardGamePlayer.deductPoint(12);
                    System.out.println("Incorrect!");
                    if (checkScore())   //checking if score is greater than zero
                    {
                        System.out.println("It's your last chance!");
                        if (number < randomGuess)
                            System.out.println("Correct card number is higher than your last guess");
                        else
                            System.out.println("Correct card number is lower than your last guess");
                    }
                    else
                    {
                        showNumber(randomGuess);
                        System.out.println("Your score is less than zero.");
                        System.out.println("GAME OVER!"); //score is less than zero, game over
                        isContinue = false;
                    }
                }
            }
            if (attempt ==4) // game ends after 4th attempt
            {
                number = guessNumber();
                updateGuess(number);
                if (compareNumber(number, randomGuess))
                {
                    System.out.println("You are correct!");
                    updGamesWon();
                    System.out.println("Congratulations, you won the game!");
                    isContinue = false;
                }
                else
                {
                    cardGamePlayer.deductPoint(20);
                    showNumber(randomGuess);
                    System.out.println("It was the last chance!");
                    System.out.println("GAME OVER!");
                }
            }
            attempt += 1; //incrementing attempt
        }
    }

    /**
     * Method to show menu for suit guess
     */
    public void guessNumberMenu()
    {
        System.out.println("Please guess card number:");
        System.out.println("1. For Ace #1");
        System.out.println("2-10. For cards numbered #2-10");
        System.out.println("11. For Jack #11");
        System.out.println("12. For Queen #12");
        System.out.println("13. For King #13");
        System.out.println("Please enter your choice(number):");
    }

    /**
     * Method to guess a suit of the card
     *
     * @return      int suit - representation of suit
     */
    public int guessSuit()
    {
        boolean isContinue = true;
        int suit = 0;
        while (isContinue)
        {
            String userInput = getInput();
            switch (checkCharLength(userInput))
            {
                case 'h':
                    System.out.println("Heart #H was selected");
                    suit = 1;
                    isContinue = false; break;
                case 'd':
                    System.out.println("Diamonds #D was selected");
                    suit = 2;
                    isContinue = false; break;
                case 'c':
                    System.out.println("Clubs #C was selected");
                    suit = 3;
                    isContinue = false; break;
                case 's':
                    System.out.println("Spades #S was selected");
                    suit = 4;
                    isContinue = false; break;
                default:
                    System.out.println("Please enter correct character!"); break;
            }
        }
        return suit;
    }

    /**
     * Method to process of guessing the card's suit by the Player, via 3 attempts
     *
     * @param   randomGuess     an integer generated by computer
     */
    public void guessSuitAttempt(int randomGuess)
    {
        boolean isContinue = true;
        int attempt = 1;
        int suit;
        while (isContinue && attempt < 4 )  //program will run for 3 attempts
        {
            if (attempt ==1)
            {
                guessSuitMenu();
                suit = guessSuit();
                updateGuess(suit);
                if (compareSuit(suit, randomGuess))
                {
                    System.out.println("You are correct!");
                    isContinue = false;
                }
                else
                {
                    cardGamePlayer.deductPoint(5); // deducting points for incorrect guess
                    System.out.println("Incorrect, please try again!");
                    System.out.println("Please enter your choice:");
                }
            }
            if (attempt ==2)
            {
                suit = guessSuit();
                updateGuess(suit);
                if (compareSuit(suit, randomGuess))
                {
                    System.out.println ("You are correct!");
                    isContinue = false;
                }
                else
                {
                    cardGamePlayer.deductPoint(10);
                    System.out.println("Incorrect, please try again!") ;
                    System.out.println("This is last chance!") ;
                    System.out.println("Please enter your choice:") ;
                }
            }
            if (attempt ==3)
            {
                suit = guessSuit();
                updateGuess(suit);
                if (compareSuit(suit, randomGuess))
                {
                    System.out.println ("You are correct!");
                    isContinue = false;
                }
                else
                {
                    cardGamePlayer.deductPoint(15);
                    System.out.println("Incorrect!") ;
                    showSuit(randomGuess);
                }
            }
            attempt += 1;   //incrementing attempt
        }
    }

    /**
     * Method to show menu with options for guess suit
     */
    public void guessSuitMenu()
    {
        System.out.println("Please guess card suit:");
        System.out.println("H. Heart #H");
        System.out.println("D. Diamonds #D");
        System.out.println("C. Clubs #C");
        System.out.println("S. Spades #S");
        System.out.println("Please enter your choice(characrter):");
    }

    /**
     * Method to check if character is alphabetical
     *
     * @param   aChar   a single character
     */
    public boolean isCharacterAlphabetic(char aChar)
    {
        boolean isAlpha = Character.isAlphabetic(aChar);
        return isAlpha;
    }

    /**
     * Method to check if character is numeric
     *
     * @param   aChar   a single character
     */
    public boolean isCharacterNumeric(char aChar)
    {
        boolean isNum = Character.isDigit(aChar);
        return isNum;
    }

    /**
     * Method to check if String is alphabetical
     *
     * @param   aString     string
     */
    public boolean isStringAlphabetic(String aString)
    {
        boolean isAlpha = true;
        for (int i = 0; i < aString.length(); i++) // checking every element of the string
        {
            char aChar = aString.charAt(i);
            if (!isCharacterAlphabetic(aChar))
                isAlpha = false;
        }
        return isAlpha;
    }

    /**
     * Method to check if String is numeric
     *
     * @param   aString     string
     */
    public boolean isStringNumeric(String aString)
    {
        boolean isNum = true;
        for(int i=0; i < aString.length(); i++)
        {
            char aChar = aString.charAt(i);
            if (!isCharacterNumeric(aChar))
                isNum = false;
        }
        return isNum;
    }

    /**
     * Method to generate random number by computer
     * Creates new object of RandomNumber class
     *
     * @param   maxNumber     integer, maximum number for random generation
     * @return  rn1           integer random number generated by computer
     */
    public int randomNumber(int maxNumber)
    {
        RandomNumber rn = new RandomNumber(maxNumber);
        int rn1 = rn.generateRandomNumber();
        return rn1;
    }

    /**
     * Method to show number of card generated randomly
     *
     * @param   getNumber     integer random number
     */
    public void showNumber(int getNumber)
    {
        switch (getNumber)
        {
            case 1:
                System.out.println("Correct number is #1 Ace"); break;
            case 2:
                System.out.println("Correct number is #2 number 2"); break;
            case 3:
                System.out.println("Correct number is #3 number 3"); break;
            case 4:
                System.out.println("Correct number is #4 number 4"); break;
            case 5:
                System.out.println("Correct number is #5 number 5"); break;
            case 6:
                System.out.println("Correct number is #6 number 6"); break;
            case 7:
                System.out.println("Correct number is #7 number 7"); break;
            case 8:
                System.out.println("Correct number is #8 number 8"); break;
            case 9:
                System.out.println("Correct number is #9 number 9"); break;
            case 10:
                System.out.println("Correct number is #10 number 10"); break;
            case 11:
                System.out.println("Correct number is #11 Jack"); break;
            case 12:
                System.out.println("Correct number is #12 Queen"); break;
            case 13:
                System.out.println("Correct number is #13 King"); break;
        }
    }

    /**
     * Method to show suit of card generated randomly
     *
     * @param   getSuit     integer random number
     */
    public void showSuit(int getSuit)
    {
        switch (getSuit)
        {
            case 1:
                System.out.println("Correct suit is Heart");break;
            case 2:
                System.out.println("Correct suit is Diamonds");break;
            case 3:
                System.out.println("Correct suit is Clubs");break;
            case 4:
                System.out.println("Correct suit is Spades");break;
        }
    }

    /**
     * Method to update number of games played
     * Incrementing number of games played by 1
     */
    public void updGamesPlayed()
    {
        int updGamesPlayed = cardGamePlayer.getNumberOfGamesPlayed() + 1;
        cardGamePlayer.setNumberOfGamesPlayed(updGamesPlayed);
    }

    /**
     * Method to update number of games won
     * Incrementing number of games won by 1
     */
    public void updGamesWon()
    {
        int updGamesWon = cardGamePlayer.getNumberOfGamesWon() + 1;
        cardGamePlayer.setNumberOfGamesWon(updGamesWon);
    }

    /**
     * Method to update highest score within games
     * Checking score and updating, if necessary
     *
     * @param score         integer score, current score
     */
    public void updHighestScore(int score)
    {
        if (score > cardGamePlayer.getHighestScore())
            cardGamePlayer.setHighestScore(score);
    }

    /**
     * Method to update last guess, suit or number
     *
     * @param lastGuess     integer value of suit or number
     */
    public void updateGuess(int lastGuess)
    {
        cardGamePlayer.setGuess(lastGuess);
    }

    /**
     * Method to update player name, object of Player class
     *
     * @param name      string
     */
    public void updatePlayerName(String name)
    {
        cardGamePlayer.setName(name);
    }
}
